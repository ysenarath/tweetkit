    def {{ request.operation_id }}(self{% if request.parameters %}, {% endif %}{% for p in request.parameters %}{{ p.name.replace('.', '_') }}{% if not p.required %}=None{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}):
        """{{ request.summary }}{%- if not request.summary.endswith('.') -%}.{%- endif %}

        {% if request.description -%}
        {{ request.description }}{% if not request.description.endswith('.') %}.{% endif %}
        {%- endif %}

        {% if request.parameters -%}
        Parameters
        ----------
        {%- for p in request.parameters %}
        {{ p.name.replace('.', '_') }}: {{ p.schema.complete_type }}{% if not p.required %}, optional{% endif %}
            {{ p.description }}
            {%- if p.example -%}
            Example: {{ p.example }}.
            {%- endif %}
        {%- endfor %}
        
        {% endif -%}

        Notes
        -----
        For more information, see: `here <{{ request.external_docs }}>`__.
        
        Returns
        -------
        obj: {% if request.x_twitter_streaming %}TwitterObjectStream{% else %}TwitterObject{% endif %}
            A object with the response data.
        """
        request_params, request_query = {}, {}
        {% for p in request.parameters -%}
        {%- if p.in_ == 'path' -%}
        {%- if not p.required -%}
        if {{ p.name.replace('.', '_') }} is not None:
            request_params['{{ p.name }}'] = {{ p.name.replace('.', '_') }}
        {% if p.schema.type == 'list' and p.schema.items.enum is not none -%}
        else:
            request_params['{{ p.name }}'] = ['{{ p.schema.items.enum | join('\', \'') }}']
        {% endif -%}
        {%- else -%}
        request_params['{{ p.name }}'] = {{ p.name.replace('.', '_') }}
        {% endif -%}
        {%- endif -%}
        {%- endfor -%}
        {%- for p in request.parameters -%}
        {%- if p.in_ == 'query' -%}
        {%- if not p.required -%}
        if {{ p.name.replace('.', '_') }} is not None:
            request_query['{{ p.name }}'] = {{ p.name.replace('.', '_') }}
        {% if p.schema.type == 'list' and p.name != 'exclude' and p.schema.items.enum is not none -%}
        else:
            request_query['{{ p.name }}'] = [{% if p.schema.items.type == 'string' %}'{{ p.schema.items.enum | join('\', \'') }}'{% else %}{{ p.schema.items.enum | join(', ') }}{% endif %}]
        {% endif -%}
        {% else -%}
        request_query['{{ p.name }}'] = {{ p.name.replace('.', '_') }}
        {% endif -%}
        {%- endif -%}
        {%- endfor -%}
        r = self.client.request('{{ path }}', method='{{ request.method }}', query=request_query, params=request_params{% if request.x_twitter_streaming %}, stream={{ request.x_twitter_streaming }}{% endif %})
        content_type = r.headers.get('content-type')
        {%- for response in request.responses -%}
        {%- if response.status_code != 'default' %}
        if r.status_code == {{ response.status_code }}:
        {%- else %}
        else:
        {%- endif -%}
            {% if request.x_twitter_streaming %}
            if content_type is None:
                # {{ response.description }}
                return TwitterObjectStream(r)
            {%- endif -%}
            {%- for content_type in response.content %}
            if content_type is not None and content_type.startswith('{{ content_type }}'):
                {% if response.content[content_type].name == 'Error' -%}
                # {{ response.description }}
                error = ProblemOrError(r)
                if error is not None:
                    raise error
                {%- elif response.content[content_type].name == 'Problem' -%}
                # {{ response.description }}
                problem = ProblemOrError(r)
                if problem is not None:
                    raise problem
                {%- else -%}
                # {{ response.description }}
                return TwitterObject(r)
                {%- endif %}
            {%- endfor -%}
        {%- endfor %}
        raise RequestException(r)
